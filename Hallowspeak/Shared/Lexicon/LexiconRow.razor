@inject DatabaseHelper databaseHelper
@inject ILogger<LexiconRow> _logger
@using MySql.Data.MySqlClient

<!-- The right click menu -->
<ContextMenu Id="@ColID">
    <Item OnClick="@OnEdit">Edit Row</Item>
    <Item OnClick="@OnDelete" CssClass="btn btn-danger delete-item">Delete Row</Item>
</ContextMenu>

@if (!Destroyed)
{
    <AuthorizeView Roles="@(AuthLevel.Writer.ToString() + "," + AuthLevel.Administrator.ToString())">
        <Authorized>
            <tr>
                <ContextMenuTrigger MenuId="@ColID">
                    <th scope="row">@ColID</th>
                    @foreach (var item in RowContent.KeyValues.Values)
                    {
                        <td>@item.Value</td>
                    }
                </ContextMenuTrigger>
            </tr>
            @if (Editing)
            {
                <tr>
                    <th scope="row"><button @onclick=Submit>Submit Changes</button></th>
                    @foreach (var item in RowContent.KeyValues.Values)
                    {
                        <td><input type="text" @bind=item.Value /></td>
                    }
                </tr>
            }
            else if (Deleting)
            {
                <tr>
                    <td class="delete-item" colspan="@(RowContent.KeyValues.Values.Count + 1)"><b style="color: ghostwhite;">Are you sure you wish to delete this row?</b> <button class="btn btn-danger" @onclick="DeleteItem">Delete</button> <button class="btn btn-secondary" @onclick="(() => Deleting = false)">Cancel</button></td>
                </tr>
            }

        </Authorized>
        <NotAuthorized>
            <tr>
                @foreach (var item in RowContent.KeyValues.Values)
                {
                    <td>@item.Value</td>
                }
            </tr>
        </NotAuthorized>
    </AuthorizeView>
}

@code  {

    public bool Editing { get; set; } = false;
    public bool Deleting { get; set; } = false;
    public bool Destroyed { get; set; } = false;

    [Parameter]
    public string ColID { get; set; }

    [Parameter]
    public LexiconItem RowContent { get; set; }

    void OnEdit(ItemClickEventArgs e)
    {
        Editing = true;
        Deleting = false;
    }
    void OnDelete(ItemClickEventArgs e)
    {
        Editing = false;
        Deleting = true;
    }

    void DeleteItem()
    {
        Deleting = false;
        Destroyed = true;

        #region Delete from DB
        Task.Run(async () =>
        {
            if (databaseHelper.Enabled)
            {
                MySqlConnection conn = databaseHelper.GetConnection();
                try
                {
                    await conn.OpenAsync();

                    MySqlCommand cmd = new MySqlCommand("DELETE FROM `Lexicon` WHERE `Id`=@Id", conn);
                    cmd.Parameters.AddWithValue("@Id", RowContent.Id);

                    await cmd.ExecuteNonQueryAsync();
                }
                catch (Exception e)
                {
                    _logger.LogError(e.ToString());
                }
                finally
                {
                    await conn.CloseAsync();
                }
            }
        });
        #endregion
    }

    void Submit()
    {
        Editing = false;

        #region Submit to Database
        Task.Run(async () =>
        {
            if (databaseHelper.Enabled)
            {
                MySqlConnection conn = databaseHelper.GetConnection();
                try
                {
                    await conn.OpenAsync();

                    MySqlCommand cmd = new MySqlCommand();
                    string commandstring = $"UPDATE `Lexicon` SET ";
                    foreach (var item in RowContent.KeyValues)
                    {
                        commandstring += $"`{item.Key}`=@{item.Key},";
                        cmd.Parameters.AddWithValue(item.Key, item.Value.Value);
                    }

                    commandstring = commandstring.Substring(0, commandstring.Length - 1) + " WHERE `Id`=@Id";
                    cmd.CommandText = commandstring;
                    cmd.Connection = conn;
                    cmd.Parameters.AddWithValue("@Id", RowContent.Id);

                    await cmd.ExecuteNonQueryAsync();
                }
                catch (Exception e)
                {
                    _logger.LogError(e.ToString());
                }
                finally
                {
                    await conn.CloseAsync();
                }
            }
        });
        #endregion
    }
}