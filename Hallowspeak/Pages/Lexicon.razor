@page "/lexicon"
@inject DatabaseHelper databaseHelper
@inject ILogger<Lexicon> _logger
@using System
@using MySql.Data.MySqlClient

<div class="row" style="padding-bottom: 1rem;">
    <div class="col">
        <h3>Lexicon</h3>
    </div>
    <AuthorizeView>
        <Authorized>
            <div class="col lexicon-controls">
                <button class="btn btn-success" @onclick="CreateNew">Add New Word</button>
                <button class="btn btn-success" @onclick="() => BulkImport = true">Bulk Import</button>
            </div>
        </Authorized>
    </AuthorizeView>
</div>
@if (BulkImport)
{
    <form style="padding-bottom: 1rem;">
        <div class="form-row">
            <div class="col">
                <label for="bulk-input">Copy and paste from the Google Sheet here:</label>
                <br />
                <textarea id="bulk-input" @bind=BulkInput />
            </div>
        </div>
        <div class="form-row" style="padding-top: 1rem;">
            <div class="col">
                <button class="btn btn-primary" @onclick=BulkSubmit>Submit</button>
            </div>
        </div>
    </form>
}
@if (CreatingNew)
{
    <form style="padding-bottom: 1rem;">
        <div class="form-row">
            <div class="col">
                <label for="ID">Suggested Word ID:</label>
                <input id="ID" type="number" class="form-control" disabled value="@NewItem.Id" />
            </div>
        </div>
        <div class="form-row">
            <!-- For each Column in the DB Structure create a field for the new item processing. -->
            @foreach (var pair in NewItem.KeyValues)
            {
                <div class="col-sm-12 col-lg-2">
                    <label for="@pair.Key">@pair.Key.Replace('_', ' '):</label>
                    <input id="@pair.Key" type="text" class="form-control" placeholder="@pair.Key.Replace('_', ' ')" @bind=pair.Value.Value />
                </div>
            }
        </div>
        <div class="form-row" style="padding-top: 1rem;">
            <div class="col">
                <button class="btn btn-primary" @onclick=SubmitNewItem>Submit</button>
            </div>
        </div>
    </form>
}
<div class="row" id="lexicon-container">
    <table class="table" id="lexicon">
        <thead>
            <tr>
                <!-- Display all columns from the DB Structure -->
                <AuthorizeView Roles="@(AuthLevel.Writer.ToString()+" ,"+AuthLevel.Administrator.ToString())">
                    <Authorized>
                        <th scope="col">Word ID</th>
                    </Authorized>
                </AuthorizeView>
                @foreach (string row in Data.First().KeyValues.Keys)
                {
                    <th scope="col">
                        <a @onclick="() => SortLexiconBy(row)">@row.Replace('_', ' ') <span style="@(row == LastSortKey ? "font-weight: bold; color: white;" : "color: #4e4e4e;")">@(row == LastSortKey ? (SortedDescending ? "↑" : "↓") : "↕")</span></a>
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Data.Skip(CurrentPage * EntriesPerPage).Take(EntriesPerPage))
            { //Display all Table Rows for current page
                <LexiconRow ColID="@item.Id.ToString()" RowContent="@item" />
            }
        </tbody>
    </table>
    <div id="pagination" class="row">
        <div class="col">
            Entries per page:
            <select @bind="EntriesPerPage">
                <option>10</option>
                <option>20</option>
                <option>50</option>
                <option>100</option>
            </select>
        </div>
        @for (int p = 1; p <= Math.Ceiling((double)Data.Count / EntriesPerPage); ++p)
        {
            int temp = p - 1;
            <div class="col">
                <a @onclick="() => CurrentPage = temp" style="text-decoration: @(temp == CurrentPage ? "underline" : "none")">
                    @p
                </a>
            </div>
        }
    </div>
</div>

@code {
    public bool CreatingNew { get; set; } = false;

    public bool BulkImport { get; set; } = false;

    private LexiconItem NewItem { get; set; } = null;

    private string BulkInput { get; set; } = string.Empty;

    private string LastSortKey { get; set; } = string.Empty;

    private bool SortedDescending { get; set; } = true;

    private int EntriesPerPage { get; set; } = 10;

    private int CurrentPage { get; set; } = 0;

    /// <summary>
    /// A List containing all Rows of data in the Lexicon.
    /// </summary>
    private List<LexiconItem> Data { get; set; }

    /// <summary>
    /// Sorts the Lexicon List by given Key
    /// </summary>
    void SortLexiconBy(string key)
    {
        if (LastSortKey != key || SortedDescending)
        {
            Data = Data.OrderBy(
                entry => entry.KeyValues[key].Value,
                StringComparer.InvariantCultureIgnoreCase
            ).ToList();
            SortedDescending = false;
        }
        else
        {
            Data = Data.OrderByDescending(
                entry => entry.KeyValues[key].Value,
                StringComparer.InvariantCultureIgnoreCase
            ).ToList();
            SortedDescending = true;
        }
        LastSortKey = key;
        this.StateHasChanged();
    }

    /// <summary>
    /// Prepares a new form for adding a new word.
    /// </summary>
    void CreateNew()
    {
        CreatingNew = true;
        NewItem = new LexiconItem(Data.Last().Id + 1) { KeyValues = new Dictionary<string, LexiconValue>() };
        foreach (var col in Data.First().KeyValues.Keys)
        {
            NewItem.KeyValues.Add(col, new LexiconValue(""));
        }
    }

    /// <summary>
    /// Parse and submit new Items from Bulk Import
    /// </summary>
    void BulkSubmit()
    {
        BulkImport = false;
        var keys = Data.First().KeyValues.Keys;
        foreach (string[] values in BulkInput.Split('\n').Select(line => line.Split('\t')))
        {
            // Skip entry if more values than keys
            if (keys.Count < values.Length) continue;

            LexiconItem newItem = new LexiconItem(Data.Last().Id + 1);
            int currentValueIndex = 0;
            foreach (string key in keys)
            {
                try
                {
                    newItem.KeyValues.Add(key, new LexiconValue(values[currentValueIndex++]));
                }
                catch (IndexOutOfRangeException) // Not all columns filled
                {
                    newItem.KeyValues.Add(key, new LexiconValue(string.Empty));
                }
            }
            Task.Run(async () => await AddItemToDB(newItem));
        }
    }

    /// <summary>
    /// Submit single new Item
    /// </summary>
    void SubmitNewItem()
    {
        CreatingNew = false;
        Task.Run(async () => await AddItemToDB(NewItem));
    }

    /// <summary>
    /// Submit new Item to the DB
    /// </summary>
    private async Task AddItemToDB(LexiconItem newItem)
    {

        if (databaseHelper.Enabled)
        {
            MySqlConnection conn = databaseHelper.GetConnection();
            try
            {
                await conn.OpenAsync();

                MySqlCommand cmd = new MySqlCommand();
                string commandstring = $"INSERT INTO `Lexicon` (";
                foreach (var item in newItem.KeyValues.Keys)
                {
                    commandstring += $"`{item}`, ";
                }

                commandstring = commandstring.Substring(0, commandstring.Length - 2) + ") VALUES (";

                foreach (var item in newItem.KeyValues)
                {
                    commandstring += $"@{item.Key}, ";
                    cmd.Parameters.AddWithValue(item.Key, item.Value.Value);
                }
                commandstring = commandstring.Substring(0, commandstring.Length - 2) + ")";

                cmd.CommandText = commandstring;
                cmd.Connection = conn;

                await cmd.ExecuteNonQueryAsync();

                //Data.Add(newItem);
            }
            catch (Exception e)
            {
                _logger.LogError(e.ToString());
            }
            finally
            {
                await conn.CloseAsync();
                await OnInitializedAsync();
                this.StateHasChanged();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (databaseHelper.Enabled)
        {
            Data = await databaseHelper.GetLexiconItemsFromDB(databaseHelper.GetConnection());
        }
        else
        {
            /* If no DB connection is possible, generate some example items for local testing. */
            try
            {
                Data = new List<LexiconItem>();
                for (int i = 0; i < 34; i++)
                {
                    Random rand = new Random();
                    Data.Add(new LexiconItem(i) { KeyValues = new Dictionary<string, LexiconValue>() });
                    Data[i].KeyValues.Add("10", new LexiconValue($"{i * rand.Next()} This"));
                    Data[i].KeyValues.Add("20", new LexiconValue($"{i * rand.Next()} is"));
                    Data[i].KeyValues.Add("30", new LexiconValue($"{i * rand.Next()} an"));
                    Data[i].KeyValues.Add("40", new LexiconValue($"{i * rand.Next()} Example"));
                    Data[i].KeyValues.Add("50", new LexiconValue($"{i * rand.Next()} just for good measure"));
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e.ToString());
            }
        }
    }
}
