@page "/lexicon"
@inject DatabaseHelper databaseHelper
@inject ILogger<Lexicon> _logger
@using MySql.Data.MySqlClient

<h3>Lexicon</h3>
<div class="row" style="padding-bottom: 1rem;">
    <div class="col">
        <button class="btn btn-success" @onclick="CreateNew">Add New Word</button>
        <button class="btn btn-success" @onclick="() => BulkImport = true">Bulk Import</button>
    </div>
</div>
@if (BulkImport)
{
    <form style="padding-bottom: 1rem;">
        <div class="form-row">
            <div class="col">
                <label for="bulk-input">Copy and paste from the Google Sheet here:</label>
                <br />
                <textarea id="bulk-input" value="@BulkInput" />
            </div>
        </div>
        <div class="form-row" style="padding-top: 1rem;">
            <div class="col">
                <button class="btn btn-primary" @onclick=BulkSubmit>Submit</button>
            </div>
        </div>
    </form>
}
@if (CreatingNew)
{
    <form style="padding-bottom: 1rem;">
        <div class="form-row">
            <div class="col">
                <label for="ID">Suggested Word ID:</label>
                <input id="ID" type="number" class="form-control" disabled value="@NewItem.Id" />
            </div>
        </div>
        <div class="form-row">
            <!-- For each Column in the DB Structure create a field for the new item processing. -->
            @foreach (var pair in NewItem.KeyValues)
            {
                <div class="col-sm-12 col-lg-2">
                    <label for="@pair.Key">@pair.Key.Replace('_', ' '):</label>
                    <input id="@pair.Key" type="text" class="form-control" placeholder="@pair.Key.Replace('_', ' ')" @bind=pair.Value.Value />
                </div>
            }
        </div>
        <div class="form-row" style="padding-top: 1rem;">
            <div class="col">
                <button class="btn btn-primary" @onclick=SubmitNewItem>Submit</button>
            </div>
        </div>
    </form>
}
<div class="row">
    <table class="table">
        <thead>
            <tr>
                <!-- Display all columns from the DB Structure -->
                <AuthorizeView Roles="@(AuthLevel.Writer.ToString()+" ,"+AuthLevel.Administrator.ToString())">
                    <Authorized>
                        <th scope="col">Word ID</th>
                    </Authorized>
                </AuthorizeView>
                @foreach (string row in Data.First().KeyValues.Keys)
                {
                    <th scope="col">@row.Replace('_', ' ')</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Data)
            { //Display all Table Rows
                <LexiconRow ColID="@item.Id.ToString()" RowContent="@item" />
            }
        </tbody>
    </table>
</div>

@code {
    public bool CreatingNew { get; set; } = false;

    public bool BulkImport { get; set; } = false;

    private LexiconItem NewItem { get; set; } = null;

    private string BulkInput { get; set; } = string.Empty;

    /// <summary>
    /// A List containing all Rows of data in the Lexicon.
    /// </summary>
    private List<LexiconItem> Data { get; set; }

    /// <summary>
    /// Prepares a new form for adding a new word.
    /// </summary>
    void CreateNew()
    {
        CreatingNew = true;
        NewItem = new LexiconItem(Data.Last().Id + 1) { KeyValues = new Dictionary<string, LexiconValue>() };
        foreach (var col in Data.First().KeyValues.Keys)
        {
            NewItem.KeyValues.Add(col, new LexiconValue(""));
        }
    }

    void BulkSubmit() => throw new NotImplementedException();

    /// <summary>
    /// Submit new Item to the DB
    /// </summary>
    void SubmitNewItem()
    {
        CreatingNew = false;
        #region Submit to DB
        Task.Run(async () =>
        {
            if (databaseHelper.Enabled)
            {
                MySqlConnection conn = databaseHelper.GetConnection();
                try
                {
                    await conn.OpenAsync();

                    MySqlCommand cmd = new MySqlCommand();
                    string commandstring = $"INSERT INTO `Lexicon` (";
                    foreach (var item in NewItem.KeyValues.Keys)
                    {
                        commandstring += $"`{item}`, ";
                    }

                    commandstring = commandstring.Substring(0, commandstring.Length - 2) + ") VALUES (";

                    foreach (var item in NewItem.KeyValues)
                    {
                        commandstring += $"@{item.Key}, ";
                        cmd.Parameters.AddWithValue(item.Key, item.Value.Value);
                    }
                    commandstring = commandstring.Substring(0, commandstring.Length - 2) + ")";

                    cmd.CommandText = commandstring;
                    cmd.Connection = conn;

                    await cmd.ExecuteNonQueryAsync();

                    Data.Add(NewItem);
                }
                catch (Exception e)
                {
                    _logger.LogError(e.ToString());
                }
                finally
                {
                    await conn.CloseAsync();
                }
            }
            else
            {
                Data.Add(NewItem);
            }
        });
        #endregion
    }

    protected override async Task OnInitializedAsync()
    {
        if (databaseHelper.Enabled)
        {
            Data = await databaseHelper.GetLexiconItemsFromDB(databaseHelper.GetConnection());
        }
        else
        {
            /* If no DB connection is possible, generate some example items for local testing. */
            try
            {
                Data = new List<LexiconItem>();
                for (int i = 0; i < 5; i++)
                {
                    Data.Add(new LexiconItem(i) { KeyValues = new Dictionary<string, LexiconValue>() });
                    Data[i].KeyValues.Add("1", new LexiconValue("This"));
                    Data[i].KeyValues.Add("2", new LexiconValue("is"));
                    Data[i].KeyValues.Add("3", new LexiconValue("an"));
                    Data[i].KeyValues.Add("4", new LexiconValue("Example"));
                }
            }
            catch (Exception e)
            {
                _logger.LogError(e.ToString());
            }
        }
    }
}
