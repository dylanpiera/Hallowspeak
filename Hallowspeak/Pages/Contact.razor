@page "/contact"
@page "/contact-us"
@inject DiscordClientCredentials credentials
@inject HttpContextAccessor httpContextAccessor
@inject Floodchecker floodchecker
@using System.Net;
@using Microsoft.AspNetCore.Http.Features

<div class="row">
    <div class="col">
        <h3>Contact Us Form</h3>
    </div>
</div>
<div class="row">
    <div class="col">
        <form>
            <div class="form-row">
                <div class="form-group col-sm-12 col-md-4">
                    <label for="reply-method">Prefered way we can get back in touch with you</label>
                    <select @bind="TypeOfReply" id="reply-method" class="form-control">
                        <option value="@ContactType.None">None</option>
                        <option value="@ContactType.Discord">Discord</option>
                        <option value="@ContactType.Twitter">Twitter</option>
                        <option value="@ContactType.Reddit">Reddit</option>
                        <option value="@ContactType.Email">Email</option>
                    </select>
                </div>
                <div class="form-group col-sm-12 col-md-8">
                    @if (TypeOfReply == ContactType.None)
                    {
                        <label for="reply-method-account">@TypeOfReply.ToString()</label>
                        <input disabled type="text" class="form-control" id="reply-method-account" @bind-value="ReplyAccount" @bind-value:event="oninput" />
                    }
                    else
                    {
                        <label for="reply-method-account">Your @TypeOfReply.ToString()</label>
                        <input type="text" class="form-control" id="reply-method-account" @bind-value="ReplyAccount" @bind-value:event="oninput" />
                    }
                    @if (ErrorMessage.Item1)
                    {
                        <div class="alert alert-danger" style="margin: 1rem 0;" role="alert"><b>@ErrorMessage.Item2</b></div>
                    }

                </div>
            </div>
            <div class="form-row">
                <div class="col">
                    <label for="contact-message">Your Message:</label>
                    <textarea class="form-control" id="contact-message" rows="5" @bind-value="Message" @bind-value:event="oninput" placeholder="Your message here (required)" />
                </div>
            </div>
            <div class="form-row" style="margin-top: 1rem;">
                <div class="col-sm-6 col-md-3">
                    <button type="button" class="form-control btn btn-success" @onclick="PostMessage">Send Message</button>
                </div>
            </div>
        </form>
    </div>
</div>
@if (Success.HasValue)
{
    <div class="row">
        <div class="col">
            <div class="alert @(Success.Value.Item1 == true ? "alert-success" : "alert-danger")" role="alert">
                @Success.Value.Item2
                <button type="button" class="close" @onclick="(() => Success = null)">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        </div>
    </div>
}

@code {
    private ContactType typeofReply = ContactType.None;
    private ContactType TypeOfReply { get => typeofReply; set { typeofReply = value; ValidateAccountInput(); } }
    private string replyAccount = "";
    private string ReplyAccount { get => replyAccount; set { replyAccount = value; ValidateAccountInput(); } }

    private string Message { get; set; } = "";

    private (bool, string) ErrorMessage { get; set; }
    private (bool, string)? Success { get; set; }

    private enum ContactType
    {
        None,
        Discord,
        Twitter,
        Reddit,
        Email
    }

    private void ValidateAccountInput()
    {
        ErrorMessage = TypeOfReply switch
        {
            ContactType.None => (false, ""),
            ContactType.Discord => (!Regex.IsMatch(ReplyAccount, @"^.+#[0-9]{4}$"), "Please provide a discord username! e.g: SomeUser#0123"),
            ContactType.Reddit => (string.IsNullOrEmpty(ReplyAccount), "Please provide your Reddit Username"),
            ContactType.Twitter => (string.IsNullOrEmpty(ReplyAccount), "Please provide your Twitter Username"),
            ContactType.Email => (!Regex.IsMatch(ReplyAccount, @"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"), "Please provide a real email! e.g: example@example.com"),
            _ => (true, "An Error Occured")
        };
    }

    private void PostMessage()
    {
        if (ErrorMessage.Item1 || string.IsNullOrEmpty(Message))
        {
            Success = (false, "Woops! Seems like you didn't fill in everything (correctly)!");
            return;
        }

        IPAddress clientIp = httpContextAccessor.HttpContext.Features.Get<IHttpConnectionFeature>().RemoteIpAddress;

        if (floodchecker.IsTimedOut(clientIp))
        {
            Success = (false, "Whoops! Seems like you've already just sent a message. Please try again later!");
            return;
        }

        var client = new RestClient("https://ptb.discordapp.com/api/");
        var request = new RestRequest(" webhooks/{id}", Method.POST);

        request.AddUrlSegment("id", credentials.ContactWebhookUrl);

        string MessageBy = TypeOfReply switch
        {
            ContactType.Discord => $"Discord User: {ReplyAccount} send us a message!",
            ContactType.Reddit => $"Reddit User: {ReplyAccount} send us a message!",
            ContactType.Twitter => $"Twitter User: @{ReplyAccount.Replace('@', ' ')} send us a message!",
            ContactType.Email => $"A User by the e-mail: {ReplyAccount} send us a message!",
            _ => "We just received an annonymous message!"
        };

        request.AddParameter("content", $"**{MessageBy}**\n>>> {Message}");
        request.AddParameter("username", "Hallowspeak.com Contact Message");

        try
        {
            client.ExecuteAsync(request, (a) =>
            {
                Success = (true, "Message successfully sent!");
                TypeOfReply = ContactType.None;
                ReplyAccount = string.Empty;
                Message = string.Empty;
                InvokeAsync(StateHasChanged);
            });

            floodchecker.Timeout(clientIp);
        }
        catch
        {
            Success = (false, "It appears something went wrong on our end, or discord may be down! Please try again later...");
        }
    }
}
